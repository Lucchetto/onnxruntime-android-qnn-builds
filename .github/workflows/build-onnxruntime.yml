name: Build ONNX Runtime

on:
  push:
    paths:
      - '.github/**' # Skip unncessary builds
    branches:
      - master  # This triggers the workflow on push to the master branch
  workflow_dispatch:  # This allows the workflow to be triggered manually
  pull_request: # Trigger when pull request is opened targeting master
    branches:
      - master

env:
  ANDROID_SDK_VERSION: "35"
  ANDROID_NDK_VERSION: "26.1.10909125"
  ONNXRUNTIME_VERSION: "1.20.1"
  QNN_SDK_VERSION: "2.28.2.241116"
  ANDROID_MIN_SDK_VERSION: "24"

jobs:

  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17 (required for Android builds)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Python 3.11.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.11'

      - name: Set up Android SDK ${{ env.ANDROID_SDK_VERSION }}
        uses: android-actions/setup-android@v3

      - name: Install required Android SDK components
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_SDK_VERSION }}" "build-tools;${{ env.ANDROID_SDK_VERSION }}.0.0"

      - name: Install Android NDK ${{ env.ANDROID_NDK_VERSION }}
        run: |
          sdkmanager "ndk;${{ env.ANDROID_NDK_VERSION }}"
          echo "NDK_ROOT=$ANDROID_HOME/ndk/${{ env.ANDROID_NDK_VERSION }}" >> $GITHUB_ENV

      - name: Install patch utility and ninja-build
        run: |
          sudo apt-get update
          sudo apt-get install -y patch ninja-build

      - name: Get repository name
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ env.REPO_NAME }}_android_arm64-v8a
          max-size: 1024M

      - name: Clone ONNX Runtime at version ${{ env.ONNXRUNTIME_VERSION }}
        run: |
          git clone --branch v${{ env.ONNXRUNTIME_VERSION }} --depth 1 https://github.com/microsoft/onnxruntime.git

      - name: Download and extract Qualcomm Neural Processing SDK ${{ env.QNN_SDK_VERSION }}
        run: |
          wget -O qnn_sdk.zip "https://apigwx-aws.qualcomm.com/qsc/public/v1/api/download/software/qualcomm_neural_processing_sdk/v${{ env.QNN_SDK_VERSION }}.zip"
          unzip qnn_sdk.zip -d $HOME/qnn_sdk
          rm qnn_sdk.zip

      - name: Build ONNX Runtime for Android arm64-v8a with QNN support
        env:
          CCACHE_COMPILERCHECK: content
        run: |
          python3 tools/ci_build/build.py --build_shared_lib --skip_submodule_sync --android \
            --config Release --use_qnn --qnn_home $HOME/qnn_sdk/qairt/${{ env.QNN_SDK_VERSION }}/ \
            --android_sdk_path ${{ env.ANDROID_HOME }} \
            --android_ndk_path ${{ env.ANDROID_HOME }}/ndk/${{ env.ANDROID_NDK_VERSION }} \
            --android_abi arm64-v8a --android_api ${{ env.ANDROID_MIN_SDK_VERSION }} \
            --cmake_generator Ninja --allow_running_as_root --use_cache \
            --build_dir build/android/arm64-v8a
        working-directory: onnxruntime
      
      - name: Zip the files
        run: |
          zip onnxruntime-android-qnn.zip onnxruntime/build/android/arm64-v8a/Release/libonnxruntime.so

      - name: Create artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_NAME }}_${{ github.sha }}
          path: onnxruntime-android-qnn.zip
